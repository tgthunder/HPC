#include<iostream>
#include<omp.h>
using namespace std;

int min(int arr[] , int n){

    int minVal = arr[0];
    #pragma omp parallel for reduction (min:minVal)
    for(int i=0;i<n;i++){
        if(arr[i] < minVal){
            minVal = arr[i];
        }
    }

    return minVal;
}

int max(int arr[] , int n){

    int maxVal = arr[0];
    #pragma omp parallel for reduction (max:maxVal)
    for(int i=0;i<n;i++){
        if(arr[i]>maxVal){
            maxVal = arr[i];
        }
    }

    return maxVal;
}


int sum(int arr[] , int n){
    int sum = 0;
    #pragma omp parallel for reduction (+:sum)
    for(int i=0;i<n;i++){
        sum = sum +  arr[i];
    }

    return sum;
}
double avg(int arr[],int n){
    int av = sum(arr,n) / n;
    return av;
}


int main(){
    int n = 5;
    int arr[] = {2,3,4,6,10};

    cout << min(arr,n)<<endl;
    cout << max(arr,n)<<endl;
    cout << sum(arr,n)<<endl;
    cout << avg(arr,n)<<endl;
}